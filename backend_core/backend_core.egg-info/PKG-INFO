Metadata-Version: 2.4
Name: backend-core
Version: 0.1.0
Summary: 股票分析系统核心功能包
Author: Your Name
Author-email: your.email@example.com
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: akshare
Requires-Dist: pandas
Requires-Dist: numpy
Requires-Dist: requests
Requires-Dist: python-dotenv
Requires-Dist: loguru
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# 股票分析系统核心引擎 (backend-core)

## 📊 项目介绍

backend-core是股票分析系统的核心引擎，负责数据采集、分析计算、预测模型运行和交易建议生成等核心功能。采用模块化设计，提供高性能、可扩展的数据处理和分析能力。

## 🏗️ 项目结构

```
backend-core/
├── data_collectors/    # 数据采集模块
│   ├── akshare/       # AKShare数据源
│   ├── tushare/       # Tushare数据源
│   └── sina/          # 新浪财经数据源
├── analyzers/         # 分析计算模块
│   ├── technical/     # 技术分析
│   ├── fundamental/   # 基本面分析
│   └── sentiment/     # 情绪分析
├── models/            # 预测模型模块
│   ├── ml/           # 机器学习模型
│   ├── dl/           # 深度学习模型
│   └── traditional/  # 传统预测模型
├── utils/            # 工具函数
│   ├── database/     # 数据库操作
│   ├── indicators/   # 技术指标计算
│   └── helpers/      # 辅助函数
├── tests/            # 测试用例
├── docs/             # 文档
├── config/           # 配置文件
└── requirements.txt  # 依赖管理
```

## 🚀 核心功能

### 1. 数据采集 (data_collectors)
- 实时行情数据采集
- 历史数据采集
- 基本面数据采集
- 新闻资讯采集
- 市场情绪数据采集

### 2. 分析计算 (analyzers)
- 技术指标计算
- 基本面分析
- 市场情绪分析
- 行业分析
- 相关性分析

### 3. 预测模型 (models)
- 机器学习预测
- 深度学习预测
- 传统技术分析
- 模型评估与优化
- 预测结果集成

### 4. 交易建议 (trading)
- 交易信号生成
- 风险控制
- 仓位管理
- 策略回测
- 绩效评估

## 🛠️ 技术栈

### 核心框架
- **数据处理**: pandas, numpy
- **机器学习**: scikit-learn, xgboost
- **深度学习**: tensorflow, pytorch
- **数据采集**: akshare, tushare, requests
- **数据库**: SQLite, Redis
- **任务调度**: celery

### 开发工具
- **版本控制**: Git
- **代码规范**: PEP 8
- **测试框架**: pytest
- **文档工具**: Sphinx

## 📦 安装部署

### 环境要求
- Python 3.8+
- CUDA支持（可选，用于深度学习）

### 安装步骤
1. 克隆代码库
```bash
git clone [repository_url]
cd backend-core
```

2. 创建虚拟环境
```bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows
```

3. 安装依赖
```bash
pip install -r requirements.txt
```

4. 配置环境变量
```bash
cp config/config.example.py config/config.py
# 编辑config.py设置必要的配置项
```

## 🧪 运行测试

```bash
# 运行所有测试
pytest

# 运行特定模块测试
pytest tests/test_data_collectors/
```

## 📈 使用示例

### 数据采集
```python
from data_collectors.akshare import StockCollector

collector = StockCollector()
data = collector.get_realtime_quotes()
```

### 技术分析
```python
from analyzers.technical import TechnicalAnalyzer

analyzer = TechnicalAnalyzer()
signals = analyzer.analyze_stock('000001.SZ')
```

### 预测模型
```python
from models.ml import StockPredictor

predictor = StockPredictor()
forecast = predictor.predict('000001.SZ', days=5)
```

## 📝 开发规范

### 代码风格
- 遵循PEP 8规范
- 使用类型注解
- 编写完整的文档字符串
- 保持代码简洁清晰

### 测试要求
- 单元测试覆盖率>80%
- 集成测试覆盖核心功能
- 性能测试达标

### 文档要求
- 模块级文档
- API文档
- 使用示例
- 更新日志

## 🔄 更新日志

### v1.0.0 (2024-01-20)
- 初始版本发布
- 实现基础数据采集
- 实现技术分析功能
- 实现基础预测模型

## 📞 技术支持

如有问题或建议，请：
1. 查看文档
2. 提交Issue
3. 联系开发团队

## �� 许可证

MIT License 
